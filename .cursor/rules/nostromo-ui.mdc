---
description: Nostromo UI project rules and guidelines
globs: ["**/*"]
alwaysApply: true
---

# Nostromo UI - Project Rules

## üö® SAFETY & PROCESS

### Deployment & Git Safety
- Do not deploy to GitHub, force push, rewrite history, create branches, or delete files without explicit permission.
- Confirm before making structural or destructive changes.

### Feature Development
- Implement only explicitly requested features.
- Suggest improvements and ask for clarification when needed.
- Provide recommendations and explain trade-offs.

### Information Accuracy
- Do not invent emails, URLs, or contact information; use placeholders like "your-email@example.com" if necessary.
- Verify URLs and links before adding.
- Ask before adding any real contact information.

## üõ†Ô∏è DEVELOPMENT STANDARDS

### Language & Documentation
- Use English exclusively for all documentation, code comments, commit messages, variable/function names, and user-facing text.

### Code Quality & Tools
- Use TypeScript strict mode; avoid `any`.
- Apply ESLint + Prettier for formatting.
- Use Vitest for unit testing (80%+ coverage), Playwright for E2E, and Storybook for component docs.

### Architecture & Styling
- Tailwind-first with utility classes.
- CSS variables for theming (HSL colors).
- Headless primitives (Radix UI for React, Ark UI for Vue).
- Accessibility-first (WCAG 2.1 AA).
- Tree-shakeable components with individual imports.
- SSR compatible, no client-side dependencies.

### Tailwind CSS v4 Requirements
- Use Tailwind CSS v4 syntax and configuration.
- Use `@tailwindcss/postcss` plugin, not `tailwindcss`.
- Include `@tailwind base; @tailwind components; @tailwind utilities;`.
- Configure via `tailwind.config.js` with presets.

### Component Development
- Use CVA for variant management.
- Follow compound component patterns.
- Implement ARIA attributes and keyboard navigation.
- Support React and Vue with consistent APIs.
- Use semantic HTML and proper accessibility roles.

### File Organization & Naming
```
packages/
‚îú‚îÄ‚îÄ ui-core/           # Product/app components
‚îú‚îÄ‚îÄ ui-marketing/      # Marketing components  
‚îî‚îÄ‚îÄ ui-tw/             # Tailwind preset & themes
```
- Components: PascalCase (Button, Input).
- Files: kebab-case (button.tsx).
- CSS variables: kebab-case (--color-brand-500).
- Vue components: N-prefix (NButton).

## üé® THEMING & COMPONENTS

### CSS Variables Structure
```css
[data-theme="nostromo"] {
  --color-brand-500: 262 84% 52%;
  --radius-md: 0.5rem;
  --font-heading: "Inter", sans-serif;
}
```

### Theme Implementation
- Use HSL format for colors to support Tailwind‚Äôs `hsl(var(--...))`.
- Semantic naming (brand, neutral, success, warning, error).
- Consistent scale (50, 100, 200... 900, 950).
- Dark mode support via `[data-color-scheme="dark"]`.

## üìù DOCUMENTATION & WORKFLOW

### Documentation Requirements
- JSDoc for all public APIs.
- Clear TypeScript interfaces.
- Storybook stories for all components.
- Accessibility notes in docs.
- Maintain README.md, ARCHITECTURE.md, THEMING.md, COMPONENT_API.md, DEVELOPMENT.md, ROADMAP.md.
- Update documentation with every change; keep it current and cross-referenced.

### Workflow Guidelines
- Read relevant docs and existing patterns before changes.
- Ask for clarification and suggest improvements.
- Follow established patterns; write tests first.
- Update documentation and check accessibility with axe-core.
- Run all tests; update Storybook, ROADMAP.md, and CHANGELOG.md.
- Request code review before completion.

### Common Pitfalls to Avoid
- Avoid CSS-in-JS; use CSS variables and Tailwind.
- Do not add runtime dependencies.
- Maintain SSR compatibility.
- Implement proper ARIA attributes.
- Do not skip documentation or ignore existing patterns.
- Avoid rushing implementation; keep docs current.

## üéØ SUCCESS CRITERIA

### Code Quality
- All tests pass.
- No linting errors.
- TypeScript compiles without errors.
- Accessibility tests pass.
- Documentation is updated.

### User Experience
- Components function as expected.
- APIs are intuitive and consistent.
- Documentation is clear and helpful.
- Examples are practical.

### Project Health
- No breaking changes without discussion.
- Performance maintained or improved.
- Bundle size optimized.
- Dependencies minimal.

---

**Remember**: This is a collaborative project. Communicate clearly, ask questions when uncertain, and prioritize code quality and user experience.