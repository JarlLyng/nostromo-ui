---
description: Nostromo UI project rules and guidelines
globs: ["**/*"]
alwaysApply: true
---

# Nostromo UI - Project Rules

## üö® CRITICAL SAFETY RULES

### Deployment & Git Safety
- **NEVER deploy to GitHub without explicit permission** - Always ask before pushing commits, creating PRs, or making any changes to the repository
- **NEVER force push** or rewrite git history without permission
- **ALWAYS ask before creating new branches** or making structural changes to the project
- **Confirm before deleting files** or making destructive changes

### Feature Development
- **DO NOT invent features** - Only implement what is explicitly requested
- **DO suggest improvements** and alternatives when you see opportunities
- **ASK for clarification** if there's any uncertainty about requirements
- **BE ADVISORY** - Provide recommendations and explain trade-offs

## üéØ PROJECT CONTEXT

### About Nostromo UI
- Open source UI library built with React, Vue, TypeScript, and Tailwind CSS
- Inspired by the USCSS Nostromo from Alien (1979)
- Monorepo structure with pnpm + Turborepo
- Two main areas: Core (product/app components) and Marketing (landing page blocks)
- CSS variable-based theming system with HSL colors

### Architecture Principles
- **Tailwind-first** approach with utility classes
- **CSS variables** for theming (no CSS-in-JS runtime)
- **Headless primitives** (Radix UI for React, Ark UI for Vue)
- **Accessibility-first** (WCAG 2.1 AA compliance)
- **Tree-shakeable** components with individual imports
- **SSR compatible** with no client-side dependencies

## üõ†Ô∏è DEVELOPMENT STANDARDS

### Code Quality
- **TypeScript strict mode** - No `any` types allowed
- **ESLint + Prettier** for consistent formatting
- **Vitest** for unit testing with 80%+ coverage
- **Playwright** for E2E testing
- **Storybook** for component documentation

### Component Development
- **Use CVA (class-variance-authority)** for variant management
- **Follow compound component patterns** for complex components
- **Implement proper ARIA attributes** and keyboard navigation
- **Support both React and Vue** with consistent APIs
- **Use semantic HTML** and proper accessibility roles

### File Organization
```
packages/
‚îú‚îÄ‚îÄ ui-core/           # Product/app components
‚îú‚îÄ‚îÄ ui-marketing/      # Marketing components  
‚îî‚îÄ‚îÄ ui-tw/            # Tailwind preset & themes
```

### Naming Conventions
- **Components**: PascalCase (Button, Input, Dialog)
- **Files**: kebab-case (button.tsx, input-field.tsx)
- **CSS variables**: kebab-case (--color-brand-500)
- **Vue components**: N-prefix (NButton, NInput)

## üé® THEMING GUIDELINES

### CSS Variables Structure
```css
[data-theme="nostromo"] {
  --color-brand-500: 262 84% 52%;
  --radius-md: 0.5rem;
  --font-heading: "Inter", sans-serif;
}
```

### Theme Implementation
- **HSL format** for all colors to support Tailwind's `hsl(var(--...))` pattern
- **Semantic naming** (brand, neutral, success, warning, error)
- **Consistent scale** (50, 100, 200... 900, 950)
- **Dark mode support** via `[data-color-scheme="dark"]`

## üìù DOCUMENTATION REQUIREMENTS

### Code Documentation
- **JSDoc comments** for all public APIs
- **TypeScript interfaces** with clear prop descriptions
- **Storybook stories** for all components
- **Accessibility notes** in component documentation

### File Documentation
- **README.md** is the main documentation hub
- **ARCHITECTURE.md** for technical details
- **THEMING.md** for theming guide
- **COMPONENT_API.md** for API reference
- **DEVELOPMENT.md** for setup and contribution
- **ROADMAP.md** for project planning and progress tracking

### Documentation Maintenance
- **ALWAYS update documentation** when making changes
- **Keep documentation current** - outdated docs are worse than no docs
- **Update relevant sections** when adding features or fixing bugs
- **Cross-reference updates** between related documentation files
- **Version documentation** changes in CHANGELOG.md
- **Review documentation** as part of code review process

## üîÑ WORKFLOW GUIDELINES

### Before Making Changes
1. **Read relevant documentation** (ARCHITECTURE.md, THEMING.md, etc.)
2. **Check existing patterns** in similar components
3. **Ask for clarification** if requirements are unclear
4. **Suggest improvements** if you see better approaches

### During Development
1. **Follow established patterns** from existing components
2. **Write tests first** (TDD approach when possible)
3. **Update documentation** as you develop
4. **Check accessibility** with axe-core

### After Development
1. **Run all tests** and ensure they pass
2. **Update Storybook stories** if needed
3. **Update relevant documentation** (MANDATORY)
4. **Update ROADMAP.md** if milestones are reached
5. **Update CHANGELOG.md** for significant changes
6. **Ask for review** before considering work complete

## üö´ COMMON PITFALLS TO AVOID

### Technical Mistakes
- **Don't use CSS-in-JS** - Stick to CSS variables and Tailwind
- **Don't add runtime dependencies** - Keep components lightweight
- **Don't break SSR compatibility** - No window/document without guards
- **Don't ignore accessibility** - Always implement proper ARIA

### Process Mistakes
- **Don't assume requirements** - Always ask for clarification
- **Don't skip documentation** - Update docs as you develop (MANDATORY)
- **Don't ignore existing patterns** - Follow established conventions
- **Don't rush to implement** - Think through the design first
- **Don't leave outdated documentation** - Always keep docs current

## üí° COMMUNICATION STYLE

### When Responding
- **Be concise but thorough** - Provide complete information
- **Use Danish** as requested by the user
- **Explain your reasoning** - Help the user understand decisions
- **Ask follow-up questions** - Ensure you understand correctly
- **Suggest alternatives** - Offer different approaches when relevant

### When Asking Questions
- **Be specific** - Ask about particular aspects, not general concepts
- **Provide context** - Explain why you need the information
- **Offer options** - Present different approaches for consideration
- **Show examples** - Use code snippets to illustrate questions

## üéØ SUCCESS CRITERIA

### Code Quality
- ‚úÖ All tests pass
- ‚úÖ No linting errors
- ‚úÖ TypeScript compilation succeeds
- ‚úÖ Accessibility tests pass
- ‚úÖ Documentation is updated

### User Experience
- ‚úÖ Components work as expected
- ‚úÖ APIs are intuitive and consistent
- ‚úÖ Documentation is clear and helpful
- ‚úÖ Examples are practical and relevant

### Project Health
- ‚úÖ No breaking changes without discussion
- ‚úÖ Performance is maintained or improved
- ‚úÖ Bundle size is optimized
- ‚úÖ Dependencies are kept minimal

---

**Remember**: This is a collaborative project. Always communicate clearly, ask questions when uncertain, and prioritize code quality and user experience over speed.